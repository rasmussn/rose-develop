
mkinstaller(1x)                                                  mkinstaller(1x)

NAME
    mkinstaller -- Generate self-extracting installer.

USAGE
    mkinstaller --copyright
    mkinstaller --help
    mkinstaller --html <pathname>
    mkinstaller --vernum
    mkinstaller --version

    mkinstaller [<options> ...] <pathname> ...

DESCRIPTION
    This script is used to generate an "installer" script implemented as
    a Bourne-shell script on UNIX-like systems (such as Linux, MacOS, or
    Solaris) or as a binary executable on Windows-like systems. A wide
    assortment of options are provided by mkinstaller to specify what is
    to be included for installation by the generated installer script.
    This generated installer itself supports a number of options for
    specifying the where the various directories are to be installed
    (prefix directory pathnames).

    There are 2 separate computer systems involved in this process:

       1) The "source" system. This is where the software to be installed
          is found and where the mkinstaller script (the generator) is
          used. On Windows-like hosts the NSIS software package must
          have been properly installed.

       2) The "target" system. This is where the generated installer
          script is run, where the software is to be installed.

    There are 3 pieces of software involved:

       1) The software to be installed. This is the software (binaries
          and/or text) located on the "source" system whose components
          have been built and is deemed ready for distribution.

       2) The mkinstaller script. Note that on a Windows-like host
          the NSIS software must be properly installed. NSIS will not
          be required on the "target" system.

       3) The generated installer script. On a UNIX-like host this is
          the Bourne-shell script generated by the mkinstaller script.
          On a Windows-like host this is a binary executable (a .exe
          file) that is generated by the mkinstaller script using the
          NSIS package under the covers.

    There are 4 distinct phases or times involved in this process:

       1) "Build-time". This is the time when the software (binaries
          and/or text files) is built and installed on the "source" system.
          How this software is built and installed is not discussed here.

       2) "Generation-time". This is the time when mkinstaller is used
          to collect the software that was produced in phase 1 and generate
          the installer script. Like phase 1, this is also done on the
          "source" system.

       3) "Transport". This is the process of taking a copy of the
          generated installer script that was generated in phase 2 from
          the "source" system to the "target" system. The details of this
          are not discussed here howerver such transport generally
          involves scp, ftp, curl, CD, DVD, USB-drive, or a download from
          a web site.

       4) "Installation-time". this is the time when the installer
          script that was generated by mkinstaller in phase 2 is executed
          on the "target" system.

    UNIX-like host

       On a UNIX-like host such as Linux, MacOS, or Solaris the generated
       installer script is implemented as a self-extracting Bourne-shell
       script carrying a tarball as a payload. Note that mkinstaller
       requires tar on UNIX-like hosts. This is normally not a problem
       as almost every UNIX-like system provides tar. On some UNIX-like
       hosts (most notably Solaris) tar doesn't support compression. On
       such systems mkinstaller will require gzcat and gzip to support
       compression.

       The installation process on a UNIX-like target system is done by
       simply running the generated installer script using the --prefix
       option to supply the installation directory. For example:

           ./banana-installer -v --prefix=/opt/banana

       Note that on UNIX-like hosts the --prefix=<pathname> option isn't
       really optional, it is required. Also note that use of the -v
       option (verbose mode) is recommended as the generated installer
       normally produces no output other than remarks, warnings, and/or
       error messages.

    Windows-like host

       On a Windows-like host (such as Windows 7 or Windows 10) the
       generated installer is implemented as a binary executable which
       is actually generated under the covers by NSIS (Nullsoft Scripted
       Install System). NSIS is required by mkinstaller on Windows-like
       hosts. Note that NSIS is open source and is freely available at:

           https://sourceforge.net/projects/nsis

       The installation process on a Windows-like target system is done by
       simply running the generated installer binary executable. Unlike an
       installer produced for UNIX-like hosts, an installer for Windows-like
       hosts may perform the installation to a default location; the user's
       desktop:

          banana-installer.exe

       To specify an installation prefix the /D=<pathname> option may be
       used:

          banana-installer.exe /D=E:\opt\banana

OPTIONS
    "mkinstaller" supports the following options:

        --copyright

            Output copyright and license info to <stdout> and quit.

        --help

            Output this man page to <stdout> and quit.

        --html <pathname>

            Output this man page as HTML to the given file pathname and quit.

        --vernum

            Output version number to <stdout> and quit.

        --version

            Output version number and revision date to <stdout> and quit.

        -c <name>
        --create=<name>

            The name of the script to generate. It is generally not advisable
            to include a suffix (aka. extension) as part of the script name.
            Also note that this is not a pathname, is is the simple name of
            the script file which is to be created in the current directory.
            By default the script will be named "installer".

        --cc=<name>

            This option has been obsoleted. Use CC=<name> and CC-options=<string>
            instead.

        --cxx=<name>

            This option has been obsoleted. Use CXX=<name> and CXX-options=<string>
            instead.

        CC=<name>
        CC=[<pathname>,<name>]
        --CC=<name>
        --CC=[<pathname>,<name>]

            Used to specify the name of the C compiler used. For historical
            reasons the leading double-dashes are optional.

            Note that there are 2 forms accepted for the option's argument:

            1) A simple compiler name such as "gcc" or "icc". This is the
               name of the C compiler that was used to produce the binaries
               to be installed. For example:

                   CC=gcc

               In this case the gcc GNU C compiler was used to produce the
               binaries (executables and libraries). Note that if <name> has
               directory components only the basename will be used.

            2) A comma separated pair enclosed in square brackets. The first
               component is the actual pathname of the C compiler that was
               used to produce the binaries to be installed. The second
               component is a name by which the compiler will be considered.
               For example:

                   CC='[/usr/lib64/ccache/cc,gcc]'

               In this case a C compiler with the pathname "/usr/lib64/ccache/cc"
               was actually used but consider it to be "gcc".

            The first form is really a special case where the basename of the
            pathname is the same as the simple name of the C compiler.

            This option almost always needs quoting as shown above since the
            square-brackets are considered to have special meaning by the shell.

        CC-options=<string>
        --CC-options=<string>

            Used to specify the options to be used with the C compiler used.
            Only special options such as the language standard assumed are
            to be specified. Define -D<name>, include pathname -I<pathname>,
            and library pathname -L<pathname> (along with library names) are
            not normally used. The normal compile-only option -c is used by
            default. Note that the <string> of options should be quoted.
            For historical reasons the leading double-dash is optional.

        CXX=<name>
        CXX=[<pathname>,<name>]
        --CXX=<name>
        --CXX=[<pathname>,<name>]

            Used to specify the name of the C++ compiler used. For historical
            reasons the leading double-dashes are optional.

            Note that there are 2 forms accepted for the option's argument:

            1) A simple C++ compiler name such as "g++" or "icpc". This is the
               name of the C++ compiler that was used to produce the binaries
               to be installed. For example:

                   CXX=g++

               In this case the g++ GNU C++ compiler was used to produce the
               binaries (executables and libraries). Note that if <name> has
               directory components only the basename will be used.

            2) A comma separated pair enclosed in square brackets. The first
               component is the actual pathname of the C++ compiler that was
               used to produce the binaries to be installed. The second
               component is a simple name by which the compiler will be considered.
               For example:

                   CXX='[/usr/lib64/ccache/c++,g++]'

               In this case a C++ compiler with the pathname "/usr/lib64/ccache/c++"
               was actually used but consider it to be "g++".

            The first form is really a special case where the basename of the
            pathname is the same as the simple name of the C++ compiler.

            This option almost always needs quoting as shown above since the
            square-brackets are considered to have special meaning by the shell.

        CXX-options=<string>
        --CXX-options=<string>

            Used to specify the options to be used with the C++ compiler used.
            Only special options such as the language standard assumed are
            to be specified. Define -D<name>, include pathname -I<pathname>,
            and library pathname -L<pathname> (along with library names) are
            not normally used. The normal compile-only option -c is used by
            default. Note that the <string> of options should be quoted.

        --contact=<address>

            A contact email address. There is no default contact address.

        --debug
        --debug=<pathname>

            Produce extra output useful when debugging the "mkinstaller"
            script itself. Output will be sent to <stderr> if no pathname
            is provided.

        --fill

            On Windows-like platforms the underlying NSIS tool will fail
            if it encounters an empty directory to be installed. This
            option works around this limitation by adding a dummy file to
            such directories (named "dummy.txt"). Note that subdirectories
            and symbolic-links don't count when checking if a directory is
            empty.

            NOTE: Use of this option isn't necessary on UNIX-like systems.

        --follow

            Follow symbolic links for directory pathnames to will be
            embedded as tarballs within the generated installer script.
            By default such symbolic links are not permitted.

            Note that Windows-like systems do not support symbolic-links.

        --intermediate-dir=<name>
        --version-dir=<name>

            Use the given simple name as an intermediate directory name
            (aka. a version directory name) to be added under the PREFIX
            directory pathname as given to the installer at installation
            time in to which the directories will be installed. The
            default is no such intermediate directory, the installations
            will be done in the PREFIX directory as given at installation
            time.

        --is-gnu-tar

            Assume the tar utility is GNU tar and so supports the z option
            (compress). By default the tar utility is located and tested.

        --nofill

            Don't add a dummy file (named "dummy.txt") to empty directories.
            See the --fill option.

        --nofollow

            Don't follow symbolic links for directory pathnames to will be
            embedded as tarballs within the generated installer script.
            When such symbolic-links are detected and error message will
            be produced and the script will terminate (after cleaning-up).
            This is the default behavior.

            Note that Windows-like systems do not support symbolic-links.

        --nosha

            Don't generate a SHA hash file for the generated script. This
            is the default behaviour.

        --nonstd

            Don't bother with any search for standard directory names such
            as bin, lib, or include, (see the --std option). Instead just
            simply use the directory pathname as given. Note that such a
            search would only done when the given directory pathnames don't
            include those with standard base names as bin, lib, or include.

        --not-gnu-tar

            Assume the tar utility is not GNU tar and doesn't support the
            z option (can't compress). By default the tar utility is located
            and tested.

        --os=<string>

            The OS on the system on which the installer is being generated.
            This string is encoded in the installer script as an aid in
            determining if the generated script is applicable to the
            system where it is run. The default is to use uname -s and
            uname -r to determine this string.

        --postinstall-bin=<pathname>

            The pathname of a binary executable which is to be included
            with the installer's payload. It will be run by the generated
            installer after all of the payload directories have been
            extracted and installed.

        --postinstall-perl=<pathname>

            The pathname of a Perl script which is to be included with
            the installer's payload. It will be run by the generated
            installer after all of the payload directories have been
            extracted and installed.

            Such post-install Perl scripts are not generally supported
            on Windows systems as Perl is not generally found on Windows
            systems.

        --postinstall-python=<pathname>

            The pathname of a Python script which is to be included with
            the installer's payload. It will be run by the generated
            installer after all of the payload directories have been
            extracted and installed.

            Such post-install Python scripts are not generally supported
            on Windows systems as Perl is not generally found on Windows
            systems.

        --postinstall-sh=<pathname>

            The pathname of a Bourne-shell script which is to be included
            with the installer's payload. It will be run by the generated
            installer after all of the payload directories have been
            extracted and installed.

            Such post-install Bourne-shell scripts are not generally
            supported on Windows systems as the Bourne-shell is not
            generally found on Windows systems.

        --preinstall-bin=<pathname>

            The pathname of a binary executable which is to be included
            with the installer's payload. It will be run by the generated
            installer before all of the payload directories have been
            extracted and installed.

        --preinstall-perl=<pathname>

            The pathname of a Perl script which is to be included with
            the installer's payload. It will be run by the generated
            installer before all of the payload directories have been
            extracted and installed.

            Such pre-install Perl scripts are not generally supported
            on Windows systems as Perl is not generally found on Windows
            systems.

        --preinstall-python=<pathname>

            The pathname of a Python script which is to be included with
            the installer's payload. It will be run by the generated
            installer before all of the payload directories have been
            extracted and installed.

            Such pre-install Python scripts are not generally supported
            on Windows systems as Perl is not generally found on Windows
            systems.

        --preinstall-sh=<pathname>

            The pathname of a Bourne-shell script which is to be included
            with the installer's payload. It will be run by the generated
            installer before all of the payload directories have been
            extracted and installed.

            Such pre-install Bourne-shell scripts are not generally
            supported on Windows systems as the Bourne-shell is not
            generally found on Windows systems.

        --prjnam=<name>
        --project-name=<name>

            The name of the project to be installed by the generated
            installer script. There is no default project name.

        --prjver=<A>.<B>[.<C>[.<D>]][<suffix>]
        --project-version=<A>.<B>[.<C>[.<D>]][<suffix>]

            The version number of the project to be installed by the
            generated installer script. Note that the given version number
            is expected to have 2, 3, or 4 dot-separated numeric components
            and an optional suffix. If the --project-version option is used
            then the --project-version option must also be used. There is
            no default project version number.

        --sha-1
        --sha-160
        --sha-256
        --sha-384
        --sha-512

            Generate a SHA hash of the generated script. The hash file
            will have the same name as the generated script but with an
            added ".sha-nnn" suffix (where nnn is one of 1, 160, 256,
            384, or 512). Note that --sha-1 and --sha-160 are synonymous.
            It is almost always a good idea to generate such a hash and
            the SHA 256 hash is generally preferred.

        --std

            If none of the given directory pathnames have basenames such
            as bin, lib, or include then look for immediate subdirectories
            of the given directory pathnames with such basenames. If any
            have such standard base names then replace the given directory
            pathname with all of the immediate subdirectory pathnames. See
            the --nonstd option.

        -v[<digit>]
        --verbose[<digit>]

            Operate in a verbose mode.

            Repeating this option increases the amount of output produced.
            Note that the option may end with an optional digit which
            indicates a repetition count. Thus the option:

               -v3

            is equavalent to:

               -v -v -v

        -w <pathname>
        --with-notice=<pathname>

            The pathname of a textfile which contains the copyright
            notice that is to be output by the generated installer script
            when the installer's --copyright option is used. By default
            the generated installer doesn't support a --copyright option.

        --with-payload

            Include the payload with the generated script. This results
            in a useful installer script that will actually install the
            supplied directories under the indicated prefix directory (see
            the --prefix=... and the --intermediate-dir=... options. This
            is the default behavior.

        --with-<name>-file=<pathname>

            A file with the specified <pathname> is to be included in the
            specified installation directory with the given basename (see
            the <pathname> description below (actually a parameter) for
            how directories to be installed are to be specified. Note that
            <name> in the option name is typically something like bin,
            include, lib, ... and like <pathname> below, may not contain
            any spaces, tabs, or dashes. If such an installation directory
            hasen't been specified then the appropriate work will be done
            so that the installer will have such a directory containing
            the specified file.

        --without-payload

            Don't include the payload with the generated script. This
            results in an ineffective installer script that won't actually
            install anything. It does however go through much of the other
            parts of the process and so may be an aid when debugging the
            generated installer.

        <pathname>

            The pathnames of one or more directories and/or files which will
            be installed in the installation prefix directory at installation
            time (when the generated installer is run). Note that such
            directories may share basenames with other directories (they'll
            be merged) but the basenames of files must be unique (otherwise
            they'd collide in the installation prefix directory). Typical
            directory basenames are: bin, include, lib, ... Typical file
            basenames are: README, LICENSE, ... Note that at least one such
            directory pathname is required.

            The basename of this pathname may not contain any spaces, tabs,
            or dashes however the directory components (if any) may.

            Note that a file pathname is much like a file pathname given
            in a --with-<name>-file=<pathname> option but is to be placed
            in the the top-level installation prefix directory.

EXAMPLE
    The following is an annotated example of the use of mkinstaller by the
    ROSE project to form a binary installer. Note that it is assumed that
    both the boost and ROSE libraries have been built and "installed" on
    this system.

    Assuming:

        Unix-like environment

        mkinstaller installed under /opt/totebag/bin
                                and /opt/totebag/lib

        Boost installed in /opt/boost/include
                       and /opt/boost/lib

        ROSE installed in /opt/ROSE/bin
                      and /opt/ROSE/include
                      and /opt/ROSE/lib
                      and /opt/ROSE/share

    Example command:

        /opt/totebag/bin/mkinstaller -v2 \
                                     -c ROSE-rh6-4.8.5-installer \
                                     CC=gcc \
                                     CXX=g++ \
                                     /opt/boost/{include,lib} \
                                     /opt/ROSE/{bin,include,lib,share} \
                                     --postinstall-perl=/opt/totebag/lib/mkinstaller/rose-post-install

    Annotated command:

       From the above example command:

           -v2 \

       The -v2 option indicates (enhanced) verbose output is desired.
       Note that verbose output is generally benificial. Also note that
       the trailing backslash was the continuation mark from the above
       very long command above (an honest cut/paste), it is not part
       of this option or any of the following options and parameters.

           -c ROSE-rh6-4.8.5-installer \

       The -c <name> option is used to give a meaningful name to the
       generated installer. Note that the generated installer (a
       Bourne-shell script) will end-up in the current directory. It is
       suggested (but not required) that the mkinstaller command be run
       from an empty directory.

           CC=gcc \

       Used to specify the name of the C compiler. Note that this is just
       the compiler name, not a pathname. This will encode information
       in the generated installer that indicates how the binaries to be
       installed were built. Not really an option, it is required.

           CXX=g++ \

       Used to specify the name of the C++ compiler. Note that this is
       just the compiler name, not a pathname. This will be encoded
       in the generated installer that indicates how the binaries to be
       installed were built. Not really an option, it is required.

           /opt/boost/{include,lib} \

       The pathnames where the boost headers and libraries were installed
       when they were built. Note that the example uses a curious form
       of wildcard notation. It actually expands to 2 separate directory
       pathnames: /opt/boost/include and /opt/boost/lib

           /opt/ROSE/{bin,include,lib,share} \

       The pathnames where the various ROSE executables, headers, and
       libraries were installed when they were built. This actually expands
       to 4 separate directory pathnames: /opt/ROSE/bin /opt/ROSE/include
       /opt/ROSE/lib and /opt/ROSE/share

           --postinstall-perl=/opt/totebag/lib/mkinstaller/rose-post-install

       The --postinstall-perl=<pathname> option indicates the pathname of
       a Perl script (a file) which is to be carried in the generated
       installer. Once all of the directories have been put in place during
       the installation this script will be executed. Note that a ROSE
       specific post-install Perl script is included with mkinstaller.

RETURNS
    "mkinstaller" returns the standard exit codes:

       0 -- success
       1 -- failure

ENVIRONMENT
    "mkinstaller" refers to the following environment variables:

        DEBUG
        DEBUG_mkinstaller

            This environment variable controls the production of additional
            output intended as an aid in debugging the script itself. When
            set to a non-zero integer value additional output will be
            generated and sent to <stderr>. If set to a pathname additional
            output will sent to a file with the given pathname. If set to
            a value of 0 (zero) or left unset then no additional debugging
            output will be produced.

        INEFFECTIVE_mkinstaller

            If this environment variable has been set then the generated
            script will lack a payload and may not even be runable. Note
            that this feature is almost never used except when debugging
            the script generation process.

        MKINSTALLER_TMPDIR

            Consider this pathname before considering TMPDIR (see
            step (0) in the NOTES section below).

INPLEMENTATION
    "mkinstaller" is implemented as a Perl script.

SEE ALSO
    Note that the following tools may be used by mkinstaller:

        cp(1),
        fgrep(1),
        gzcat(1),
        gzip(1),
        ldd(1),
        makensis(1),
        NSIS,
        pshaw(1x),
        sh(1),
        sha1sum(1),
        sha256sum(1),
        sha384sum(1),
        sha512sum(1),
        strings(1),
        tar(1),
        uname(1)

    Some of these may be required and if not found mkinstaller may
    fail with an error message.

NOTES
    The directory where temporary files are to be placed is determined
    as follows:

        0) If MKINSTALLER_TMPDIR is defined and is not empty then
           consider its value as a directory pathname. If this pathname
           exists and is a directory and is writable then temporary
           files will be placed in this directory. Otherwise...
        1) If TMPDIR is defined and is not empty then consider its
           value as a directory pathname. If this pathname exists
           and is a directory and is writable then temporary files
           will be placed in this directory. Otherwise...
        2) If TMP is defined and is not empty then consider its
           value as a directory pathname. If this pathname exists
           and is a directory and is writable then temporary files
           will be placed in this directory. Otherwise...
        3) If TEMP is defined and is not empty then consider its
           value as a directory pathname. If this pathname exists
           and is a directory and is writable then temporary files
           will be placed in this directory. Otherwise...
        4) If the user's home directory can be determined and if
           this home directory contains a subdirectory named tmp
           that is itself writable then temporary files will be
           placed in this directory. Otherwise...
        5) If "C:<userProfile>\AppData\Local\temp" exists and
           is a writable directory then temporary files will be
           placed in this directory. Otherwise...
        6) If "/tmp" exists and is writable then temporary files
           will be placed in this directory. Otherwise...
        7) If "/var/tmp" exists and is writable then temporary files
           will be placed in this directory. Otherwise...
        8) If "C:\Temp" exists and is writable then temporary files
           will be placed in this directory. Otherwise...
        9) If "C:\Windows\Temp" exists and is writable then temporary
           files will be placed in this directory. Otherwise...
       10) If the current directory is writable then temporary files
           will be placed in the current directory. Otherwise...
       11) A fatal error message will be sent to <stderr> and
           the program will exit with a non-zero exit code.

    Note that 5, 8, and 9 are only applicable on Windows-like hosts.

DETAILS
    The installer construction process is implemented in a different
    fashion on UNIX-like systems such as Linux, MacOS, and Solaris
    from that on a Windows-like system. The mkinstaller command line
    use is identical between UNIX- and Windows-like hosts.

    UNIX-like host

       On a UNIX-like host the generated installer script is implemented
       as a self-extracting Bourne-shell script carrying a tarball as
       a payload.

       Details of the installer construction process on UNIX:

          Aside from initalization and command line processing the UNIX
          implementation of mkinstaller goes through the following steps:

          1) Determination of a suitable temp directory. Much of the work
             done by the mkinstaller script is done in a temp directory.
          2) Creation of a top level temporary directory under which all
             other temporaries will be created. Creation of an "accumulator",
             an "intermediate" and a "wrapper" directory in the top level
             temp directory. A tarup/untar process will use both the
             "intermediate" and "accumulator" directories to merge given
             directories with the same basename. The "wrapper" directory
             will be used to carry the individual directory tarballs.
          3) From each of the specified directories to be installed such
             as .../bin, .../lib, specified on the mkinstaller command line
             tarup the individual directory forming tarballs in the wrapper
             directory in the temp directory.
          4) Tarup the temporary wrapper directory for eventual inclusion
             in the generated installer.
          5) Generate the text of the "installer" script in the temporary
             directory customizing it with with options for specifying an
             overall prefix directory and individual prefixes for each of
             the directories specified on the mkinstaller command line.
          6) Add the tarball built in (4) to the end of the script generated
             in (5) forming the distribution self-extracting installation
             script in the directory where mkinstaller was run.
          7) Cleanup.

          In the end the only product is the desired distribution self-
          extracting installation script in the directory where the
          mkinstaller command was run. Everything else produced along
          the way (directories and files) is considered temporary and
          is destroyed.

          Note that the name of the generated installer script is specified
          using the -c <name> or --create=<name> option to mkinstaller.
          However if the -c <name> or --create=<name> option is not used
          then mkinstaller will try to come-up with a reasonable name:

             1) If the --project-name=<name> and --project-version=<version>
                options were used then the name of the generated installer
                will resemble:

                   <name>-<version>-installer

             2) If the --project-name=<name> option was used but not the
                --project-version option the name of the generated
                installer will resemble:

                   <name>-installer

             3) If neither the --project-name nor the --project-version
                options were used the name of the generated installer will
                simply be:

                   installer

          As is typical for a UNIX-like environment, the generated script
          has no extension.

       How the generated installer script works on a UNIX-like target:

          1) The installer script locates itself. This may seem to be an
             obvious and or silly question but the actual location of the
             script file is necessary for the actual extraction (the script
             file must be read by the standard "tail" utility).
          2) Determination of a suitable temp directory. Much of the work
             done by the generated installer script is done in a temp
             directory. Creation of a top level temporary directory under
             which all other temporaries will be created. This temp
             directory is created under the standard temp directory
             determined at the start of this step (see NOTES).
          3) PREFIX and PREFIX_xxx values are established from command
             line options. If appropriate options aren't supplied to
             install all directories then the installer script will propmpt
             for the necessary pathname(s). The installer script will
             create the directories if necessary.
          4) The tarball embedded in the installer script is extracted from
             the installer script into the temp directory created in (2).
          5) The tarball in (4) is unwrapped revealing one or more tarballs
             (one for each installation directory such as bin.tar.gz/
             include.tar.gz/ lib.tar.gz/ ...). If a pre-install script was
             supplied to mkinstaller when the generated installer script
             was produced then it will be revealed at this time. Similarly
             if a post-install script was supplied to mkinstaller when the
             generated installer script was produced then it will also be
             revealed at this time. Note that neither of these scripts if
             supplied and revealed are actually executed in this step. See
             steps (6) and (8).
          6) If (5) revealed a pre-install script then it will be executed
             by the approptiate interpreter. Note that each of the PREFIX
             and/or PREFIX_xxx directories will be supplied as an option to
             this pre-install script (such as --prefix_bin=<pathname>). Also
             note at this time the individual tarballs representing the
             directories to install have NOT be unwrapped.
          7) Each individual tarball revealed in (5) is unwrapped into
             the appropriate PREFIX directory overlying anything already
             there.
          8) If (5) revealed a post-install script then it will be executed
             by the approptiate interpreter. Note that each of the PREFIX
             and/or PREFIX_xxx directories will be supplied as an options
             to this post-install script (such as --prefix_bin=<pathname>).
          9) Cleanup.

    Windows-like host

       On a Windows-like host (such as Windows 7 or 10) the generated
       installer is implemented as a binary executable which is actually
       generated under the covers by NSIS (the Nullsoft Scripted Install
       System). NSIS is open source and is freely available at

           https://sourceforge.net/projects/nsis

       Details of the installer construction process on Windows:

          Aside from initalization and command line processing the Windows
          implementation of mkinstaller goes through the following steps:

          1) Determination of a suitable temp directory. Much of the work
             done by the mkinstaller script is done in a temp directory.
          2) Generation of a .nsi script file.
          3) MakeNSIS is used to "compile" the .nsi script forming a
             .exe binary executable.

          The .exe binary executable formed in step (3) is the product of the
          mkinstaller script and may be shipped to customers to perform the
          desired installation on their Windows system.

          Note that the name of the installer is specified using the -c <name>
          or --create=<name> option to mkinstaller. However if the -c <name>
          or --create=<name> option is not used then mkinstaller will try
          to come-up with a reasonable name:

             1) If the --project-name=<name> and --project-version=<version>
                was used then the name of the generated installer will be:

                   <name>-<version>-installer.exe

             2) If the --project-name=<name> was used but not the
                --project-version option the name of the generated
                installer will be:

                   <name>-installer.exe

             3) If neither the --project-name nor the --project-version
                option the name of the generated installer will be:

                   installer.exe

          If the name is specified using the -c <name> or --create=<name>
          option then the name should NOT included a .exe extension. The
          makensis tool which actually produces the binary executable
          will add the necessary extension.

       Running the generated installer on a Windows target system:

          The default use of the generated installer will produce a new
          directory on the user's desktop.

             circus> installer.exe

          A different prefix may be specified using the /D option:

             circus> installer.exe /D=E:\opt\banana

          Note that the prefix directory will be creates as necessary
          however the uninstaller will only (recursively delete) the
          final directory component. In the above example only
          E:\opt\banana will be (recursivly deleted, but the
          directory E:\opt will be left intact.

       Note that the generated installer will pop-up a progress bar dialog
       box to indicate the installation progress. The above examples were
       run by bozo on circus.other.net

AUTHOR
    Jim Reus (jim.reus@gmail.com)

CONTACT
    Please contact:

        totebag.help (totebag.help@gmail.com) with questions.

        totebag.bugs (totebag.bugs@gmail.com) to report problems.

        totebag.more (totebag.more@gmail.com) to request enhancements.


    Be sure to provide as much information as possible.

    This man page was generated by mkinstaller 2.5.4 using the --help option. Revised 21Jun2019,16:47:49z
