include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs
include $(top_srcdir)/tests/nonsmoke/functional/input_codes/cxx/Makefile_variables

# Import list of C++ test cases that should pass:
#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS
#   EXAMPLE_TESTCODES_REQUIRED_TO_PASS_SHORT
#


# EXAMPLE_TESTCODES_REQUIRED_TO_PASS = \
#  $(TESTCODE_CURRENTLY_FAILING)

# EXAMPLE_TESTCODES_REQUIRED_TO_PASS = $(NEVER_PASING_TESTCODE_CURRENTLY_FAILING)

# TOO1 (2013-08-05): Refactored testcode specification into separate global file:
#
#                      $ROSE/tests/nonsmoke/functional/input_codes/cxx/Makefile_variables
#
#                  This way all $ROSE/tests can utilize the same growing suite
#                  of ROSE testcodes.
#
EXAMPLE_TESTCODES_REQUIRED_TO_PASS = \
   $(ROSE__CXX_TESTS) \
   test2013_253.C \
   test2013_255.C \
   test2013_256.C \
   test2013_258.C \
   test2013_259.C \
   test2013_261.C \
   test2013_271.C \
   test2013_272.C \
   test2013_273.C \
   test2013_274.C \
   test2013_275.C \
   test2013_276.C \
   test2013_277.C \
   test2013_278.C \
   test2013_279.C \
   test2013_280.C \
   test2013_281.C \
   test2013_283.C \
   test2013_284.C \
   test2013_285.C \
   test2013_286.C \
   test2013_287.C \
   test2013_288.C \
   test2013_289.C \
   test2013_290.C \
   test2013_291.C \
   test2013_292.C \
   test2013_293.C \
   test2013_294.C \
   test2013_295.C \
   test2013_296.C \
   test2014_01.C \
   test2014_02.C \
   test2014_03.C \
   test2014_04.C \
   test2014_05.C \
   test2014_06.C \
   test2014_07.C \
   test2014_08.C \
   test2014_09.C \
   test2014_10.C \
   test2014_11.C \
   test2014_12.C \
   test2014_13.C \
   test2014_16.C \
   test2014_17.C \
   test2014_18.C \
   test2014_19.C \
   test2014_20.C \
   test2014_21.C \
   test2014_24.C \
   test2014_26.C \
   test2014_27.C \
   test2014_28.C \
   test2014_29.C \
   test2014_30.C \
   test2014_31.C \
   test2014_32.C \
   test2014_33.C \
   test2014_34.C \
   test2014_35.C \
   test2014_36.C \
   test2014_37.C \
   test2014_38.C \
   test2014_39.C \
   test2014_40.C \
   test2014_41.C \
   test2014_43.C \
   test2014_45.C \
   test2014_47.C \
   test2014_48.C \
   test2014_49.C \
   test2014_50.C \
   test2014_53.C \
   test2014_54.C \
   test2014_55.C \
   test2014_56.C \
   test2014_57.C \
   test2014_58.C \
   test2014_60.C \
   test2014_61.C \
   test2014_62.C \
   test2014_67.C \
   test2014_68.C \
   test2014_70.C \
   test2014_72.C \
   test2014_73.C \
   test2014_74.C \
   test2014_75.C \
   test2013_117.C \
   test2014_79.C \
   test2014_80.C \
   test2014_82.C \
   test2014_83.C \
   test2014_84.C \
   test2014_85.C \
   test2014_86.C \
   test2014_87.C \
   test2014_88.C \
   test2014_89.C \
   test2014_90.C \
   test2014_91.C \
   test2014_92.C \
   test2014_93.C \
   test2014_94.C \
   test2014_95.C \
   test2014_96.C \
   test2014_97.C \
   test2014_98.C \
   test2014_100.C \
   test2014_101.C \
   test2014_102.C \
   test2014_107.C \
   test2014_108.C \
   test2014_109.C \
   test2014_112.C \
   test2014_114.C \
   test2014_115.C \
   test2014_116.C \
   test2014_117.C \
   test2014_119.C \
   test2014_121.C \
   test2014_122.C \
   test2014_123.C \
   test2014_124.C \
   test2014_125.C \
   test2014_126.C \
   test2014_127.C \
   test2014_128.C \
   test2014_129.C \
   test2014_130.C \
   test2014_131.C \
   test2014_132.C \
   test2014_133.C \
   test2014_134.C \
   test2014_135.C \
   test2014_136.C \
   test2014_137.C \
   test2014_139.C \
   test2014_140.C \
   test2014_141.C \
   test2014_142.C \
   test2014_143.C \
   test2014_144.C \
   test2014_145.C \
   test2014_146.C \
   test2014_147.C \
   test2014_148.C \
   test2014_149.C \
   test2014_150.C \
   test2014_151.C \
   test2014_152.C \
   test2014_153.C \
   test2014_154.C \
   test2014_155.C \
   test2014_156.C \
   test2014_160.C \
   test2014_161.C \
   test2014_162.C \
   test2014_163.C \
   test2014_165.C \
   test2014_166.C \
   test2014_167.C \
   test2014_168.C \
   test2014_169.C \
   test2014_170.C \
   test2014_171.C \
   test2014_172.C \
   test2014_174.C \
   test2014_176.C \
   test2014_177.C \
   test2014_178.C \
   test2014_179.C \
   test2014_182.C \
   test2014_183.C \
   test2014_184.C \
   test2014_185.C \
   test2014_186.C \
   test2014_189.C \
   test2014_190.C \
   test2014_191.C \
   test2014_192.C \
   test2014_193.C \
   test2014_194.C \
   test2014_195.C \
   test2014_196.C \
   test2014_197.C \
   test2014_198.C \
   test2014_199.C \
   test2014_200.C \
   test2014_201.C \
   test2014_202.C \
   test2014_203.C \
   test2014_204.C \
   test2014_205.C \
   test2014_206.C \
   test2014_207.C \
   test2014_208.C \
   test2014_209.C \
   test2014_210.C \
   test2014_212.C \
   test2014_215.C \
   test2014_216.C \
   test2014_217.C \
   test2014_218.C \
   test2014_219.C \
   test2014_220.C \
   test2014_221.C \
   test2014_222.C \
   test2014_223.C \
   test2014_224.C \
   test2014_225.C \
   test2014_226.C \
   test2014_226.C \
   test2014_226.C \
   test2014_226.C \
   test2014_230.C \
   test2014_231.C \
   test2014_232.C \
   test2014_233.C \
   test2014_234.C \
   test2014_235.C \
   test2014_239.C \
   test2014_240.C \
   test2014_241.C \
   test2014_242.C \
   test2014_243.C \
   test2015_01.C \
   test2015_02.C \
   test2015_03.C \
   test2015_04.C \
   test2015_05.C \
   test2015_07.C \
   test2015_08.C \
   test2015_09.C \
   test2015_20.C \
   test2015_21.C \
   test2015_22.C \
   test2015_24.C \
   test2015_26.C \
   test2015_27.C \
   test2015_28.C \
   test2015_29.C \
   test2015_32.C \
   test2015_33.C \
   test2015_34.C \
   test2015_35.C \
   test2015_36.C \
   test2015_40.C \
   test2015_43.C \
   test2015_44.C \
   test2015_45.C \
   test2015_50.C \
   test2015_52.C \
   test2015_57.C \
   test2015_58.C \
   test2015_59.C \
   test2015_60.C \
   test2015_61.C \
   test2015_76.C \
   test2015_77.C \
   test2015_78.C \
   test2015_79.C \
   test2015_80.C \
   test2015_97.C \
   Area-01.C \
   method-defn-in-tpldecl-0.C \
   method-defn-in-tpldecl-1.C \
   test2015_85.C \
   test2015_86.C \
   test2015_88.C \
   test2015_89.C \
   test2015_99.C \
   test2015_100.C \
   test2015_101.C \
   test2015_102.C \
   test2015_103.C \
   test2015_104.C \
   test2015_106.C \
   test2015_107.C \
   test2015_108.C \
   test2015_110.C \
   test2015_111.C \
   test2015_112.C \
   test2015_113.C \
   test2015_114.C \
   test2015_117.C \
   test2015_118.C \
   test2015_119.C \
   test2015_121.C \
   test2015_122.C \
   test2015_123.C \
   test2015_124.C \
   test2015_125.C \
   test2015_128.C \
   test2015_130.C \
   test2015_131.C \
   test2015_132.C \
   test2015_133.C \
   test2015_134.C \
   test2015_137.C \
   test2015_138.C \
   test2015_139.C \
   test2015_140.C \
   test2015_141.C \
   test2015_142.C \
   test2015_143.C \
   test2015_144.C \
   test2015_145.C \
   test2015_146.C \
   test2015_147.C \
   test2015_149.C \
   test2015_150.C \
   test2015_151.C \
   test2015_152.C \
   test2015_153.C \
   test2015_154.C \
   test2016_01.C \
   test2016_02.C \
   test2016_03.C \
   test2016_04.C \
   test2016_05.C \
   test2016_06.C \
   test2016_07.C \
   test2016_08.C \
   test2016_09.C \
   test2016_10.C \
   test2016_11.C \
   test2016_12.C \
   test2016_13.C \
   test2016_14.C \
   test2016_15.C \
   test2016_16.C \
   test2016_17.C \
   test2016_18.C \
   test2016_19.C \
   test2016_21.C \
   test2016_25.C \
   test2016_26.C \
   test2016_27.C \
   test2016_28.C \
   test2016_29.C \
   test2016_30.C \
   test2016_31.C \
   test2016_32.C \
   test2016_33.C \
   test2016_34.C \
   test2016_36.C \
   test2016_37.C \
   test2016_38.C \
   test2016_40.C \
   test2016_41.C \
   test2016_42.C \
   test2016_43.C \
   test2016_44.C \
   test2016_45.C \
   test2016_46.C \
   test2016_47.C \
   test2016_48.C \
   test2016_49.C \
   test2016_50.C \
   test2016_51.C \
   test2016_53.C \
   test2016_54.C \
   test2016_55.C \
   test2016_56.C \
   test2016_57.C \
   test2016_59.C \
   test2016_60.C \
   test2016_61.C \
   test2016_62.C \
   test2016_63.C \
   test2016_64.C \
   test2016_65.C \
   test2016_66.C \
   test2016_67.C \
   test2016_68.C \
   test2016_69.C \
   test2016_70.C \
   test2016_71.C \
   test2016_80.C \
   test2016_81.C \
   test2016_83.C \
   test2016_85.C \
   test2016_86.C \
   test2016_87.C \
   test2016_88.C \
   test2016_91.C \
   test2016_93.C \
   test2017_01.C \
   test2017_02.C \
   test2017_03.C \
   test2017_04.C \
   test2017_09.C \
   test2017_10.C \
   test2017_11.C \
   test2017_13.C \
   test2017_14.C \
   test2017_15.C \
   test2017_16.C \
   test2017_17.C \
   test2017_18.C \
   test2017_19.C \
   test2017_21.C \
   test2017_22.C \
   test2017_23.C \
   test2017_25.C \
   test2017_26.C \
   test2017_27.C \
   test2017_28.C \
   test2017_30.C \
   test2017_35.C \
   test2017_36.C \
   test2017_37.C \
   test2017_38.C \
   test2017_39.C \
   test2017_40.C \
   test2017_41.C \
   test2017_42.C \
   test2017_43.C \
   test2017_45.C \
   test2017_48.C \
   test2017_49.C \
   test2017_50.C \
   test2017_51.C \
   test2017_52.C \
   test2017_53.C \
   test2017_54.C \
   test2017_55.C \
   test2017_56.C \
   test2017_57.C \
   test2017_58.C \
   test2017_60.C \
   test2017_61.C \
   test2017_62.C \
   test2017_63.C \
   test2017_64.C \
   test2017_65.C \
   test2017_66.C \
   test2017_68.C \
   test2017_70.C \
   test2017_71.C \
   test2017_72.C \
   test2017_73.C \
   test2017_74.C \
   test2017_75.C \
   test2017_76.C \
   test2017_77.C \
   test2017_78.C \
   test2017_79.C \
   test2017_80.C \
   test2017_81.C \
   test2017_82.C \
   test2017_83.C \
   test2017_84.C \
   test2017_87.C \
   test2017_88.C \
   test2017_89.C \
   test2017_90.C \
   test2017_91.C \
   test2017_92.C \
   test2017_93.C \
   test2017_94.C \
   test2017_95.C \
   test2017_96.C \
   test2017_97.C \
   test2017_98.C \
   test2017_100.C \
   test2017_101.C \
   test2017_102.C \
   test2017_103.C \
   test2017_104.C \
   test2017_105.C \
   test2017_106.C \
   test2017_107.C \
   test2018_02.C \
   test2018_03.C \
   test2018_04.C \
   test2018_05.C \
   test2018_06.C \
   test2018_07.C \
   test2018_08.C \
   test2018_09.C \
   test2018_10.C \
   test2018_11.C \
   test2018_12.C \
   test2018_13.C \
   test2018_14.C \
   test2018_15.C \
   test2018_16.C \
   test2018_17.C \
   test2018_18.C \
   test2018_19.C \
   test2018_20.C \
   test2018_21.C \
   test2018_24.C \
   test2018_27.C \
   test2018_29.C \
   test2018_30.C \
   test2018_32.C \
   test2018_33.C \
   test2018_34.C \
   test2018_35.C \
   test2018_36.C \
   test2018_37.C \
   test2018_38.C \
   test2018_39.C \
   test2018_40.C \
   test2018_41.C \
   test2018_42.C \
   test2018_43.C \
   test2018_44.C \
   test2018_45.C \
   test2018_46.C \
   test2018_47.C \
   test2018_48.C \
   test2018_49.C \
   test2018_50.C \
   test2018_51.C \
   test2018_52.C \
   test2018_53.C \
   test2018_54.C \
   test2018_55.C \
   test2018_56.C \
   test2018_57.C \
   test2018_58.C \
   test2018_59.C \
   test2018_60.C \
   test2018_61.C \
   test2018_62.C \
   test2018_63.C \
   test2018_64.C \
   rose-1431-0.C \
   test2014_76.C \
   test2014_110.C \
   test2015_30.C \
   test2015_115.C \
   test2015_116.C \
   test2015_148.C \
   test2016_89.C \
   lulesh.C \
   luleshTALC.C \
   test2013_282.C \
   test2014_99.C \
   test2014_118.C \
   test2014_120.C \
   test2014_157.C \
   rose-1540-0.C \
   rose-1541-0.C \
   rose-1701-0.C \
   rose-1766.C \
   rose-1789-001.C \
   rose-1814.C \
   rose-1834.C \
   rose-1839.C \
   rose-1846.C \
   rose-1860.C \
   rose-1998.C \
   rose-2000-01.C \
   rose-2000-02.C \
   rose-2007-01.C \
   rose-2007-02.C \
   rose-2008.C \
   rose-2073.C \
   test2019_01.C \
   test2019_02.C \
   test2019_03.C \
   test2019_04.C \
   test2019_05.C \
   test2019_06.C \
   test2019_07.C \
   test2019_08.C \
   test2019_09.C \
   test2019_10.C \
   test2019_11.C \
   test2019_12.C \
   test2019_13.C \
   test2019_14.C \
   test2019_15.C \
   test2019_16.C \
   test2019_17.C \
   test2019_18.C \
   test2019_19.C \
   test2019_20.C \
   test2019_21.C \
   test2019_22.C \
   test2019_23.C \
   test2019_24.C

FAILING_TEST_SUITE_TESTS = \
   test2018_22.C \
   test2018_23.C \
   test2018_25.C \
   test2018_26.C \
   test2018_28.C \
   test2018_31.C

TESTCODE_CURRENTLY_FAILING = \
   $(FAILING_TEST_SUITE_TESTS) \
   c++trick.C \
   test_gnu.C \
   certSignalExample.C \
   longFile.C \
   test2004_35.C \
   test2004_25.C \
   test2005_69.C \
   test2005_85.C \
   test2005_115.C \
   test2005_151.C \
   test2005_188.C \
   test2005_200.C \
   test2005_201.C \
   test2005_204.C \
   test2005_205.C \
   test2005_06.C \
   test2005_151.C \
   test2005_200.C \
   test2005_204.C \
   test2005_69.C \
   test2005_85.C \
   test2006_09.C \
   test2006_127.C \
   test2006_15.C \
   test2006_167.C \
   test2006_168.C \
   test2006_169.C \
   test2006_172.C \
   test2006_174.C \
   test2006_175.C \
   test2006_176.C \
   test2006_180.C \
   test2006_182.C \
   test2006_186.C \
   test2006_188.C \
   test2006_27.C \
   test2006_64.C \
   test2006_09.C \
   test2006_11.C \
   test2006_15.C \
   test2006_21.C \
   test2006_24.C \
   test2006_27.C \
   test2006_33.C \
   test2006_35.C \
   test2006_36.C \
   test2006_49.C \
   test2006_60.C \
   test2006_64.C \
   test2006_127.C \
   test2006_128.C \
   test2006_130.C \
   test2006_131.C \
   test2006_138.C \
   test2006_167.C \
   test2006_168.C \
   test2006_169.C \
   test2006_170.C \
   test2006_171.C \
   test2006_172.C \
   test2006_173.C \
   test2006_174.C \
   test2006_175.C \
   test2006_176.C \
   test2006_180.C \
   test2006_182.C \
   test2006_184.C \
   test2006_186.C \
   test2006_187.C \
   test2006_188.C \
   test2007_62.C \
   test2007_18.C \
   test2007_19.C \
   test2007_20.C \
   test2007_22.C \
   test2007_27.C \
   test2007_30.C \
   test2007_31.C \
   test2007_32.C \
   test2007_33.C \
   test2007_34.C \
   test2007_35.C \
   test2007_36.C \
   test2007_37.C \
   test2007_39.C \
   test2007_42.C \
   test2007_45.C \
   test2007_51.C \
   test2007_52.C \
   test2007_54.C \
   test2007_56.C \
   test2007_58.C \
   test2007_60.C \
   test2007_61.C \
   test2007_63.C \
   test2007_64.C \
   test2007_65.C \
   test2007_66.C \
   test2007_67.C \
   test2007_68.C \
   test2007_69.C \
   test2007_71.C \
   test2007_73.C \
   test2007_74.C \
   test2007_76.C \
   test2007_79.C \
   test2007_80.C \
   test2007_86.C \
   test2007_87.C \
   test2007_88.C \
   test2007_89.C \
   test2007_91.C \
   test2007_92.C \
   test2007_93.C \
   test2007_96.C \
   test2007_97.C \
   test2007_99.C \
   test2007_100.C \
   test2007_101.C \
   test2007_104.C \
   test2007_105.C \
   test2007_106.C \
   test2007_107.C \
   test2007_108.C \
   test2007_109.C \
   test2007_110.C \
   test2007_111.C \
   test2007_112.C \
   test2007_113.C \
   test2007_114.C \
   test2007_115.C \
   test2007_116.C \
   test2007_117.C \
   test2007_118.C \
   test2007_119.C \
   test2007_120.C \
   test2007_121.C \
   test2007_122.C \
   test2007_123.C \
   test2007_124.C \
   test2007_125.C \
   test2007_126.C \
   test2007_127.C \
   test2007_129.C \
   test2007_131.C \
   test2007_132.C \
   test2007_134.C \
   test2007_136.C \
   test2007_138.C \
   test2007_139.C \
   test2007_143.C \
   test2007_144.C \
   test2007_145.C \
   test2007_146.C \
   test2007_148.C \
   test2007_149.C \
   test2007_153.C \
   test2007_156.C \
   test2007_168.C \
   test2007_174.C \
   test2007_175.C \
   test2007_176.C \
   test2007_100.C \
   test2007_104.C \
   test2007_106.C \
   test2007_107.C \
   test2007_110.C \
   test2007_111.C \
   test2007_114.C \
   test2007_116.C \
   test2007_117.C \
   test2007_118.C \
   test2007_119.C \
   test2007_120.C \
   test2007_121.C \
   test2007_122.C \
   test2007_126.C \
   test2007_127.C \
   test2007_129.C \
   test2007_131.C \
   test2007_132.C \
   test2007_134.C \
   test2007_136.C \
   test2007_143.C \
   test2007_145.C \
   test2007_148.C \
   test2007_149.C \
   test2007_156.C \
   test2007_168.C \
   test2007_174.C \
   test2007_176.C \
   test2007_18.C \
   test2007_19.C \
   test2007_20.C \
   test2007_22.C \
   test2007_27.C \
   test2007_31.C \
   test2007_32.C \
   test2007_33.C \
   test2007_34.C \
   test2007_36.C \
   test2007_37.C \
   test2007_39.C \
   test2007_45.C \
   test2007_51.C \
   test2007_52.C \
   test2007_56.C \
   test2007_58.C \
   test2007_61.C \
   test2007_63.C \
   test2007_67.C \
   test2007_68.C \
   test2007_71.C \
   test2007_73.C \
   test2007_74.C \
   test2007_76.C \
   test2007_80.C \
   test2007_86.C \
   test2007_87.C \
   test2007_88.C \
   test2007_89.C \
   test2007_91.C \
   test2007_96.C \
   test2007_97.C \
   test2007_99.C \
   test2007_95.C \
   test2008_07.C \
   test2008_15.C \
   test2009_23.C \
   test2009_26.C \
   test2009_25.C \
   test2009_07.C \
   test2009_13.C \
   test2009_22.C \
   test2009_33.C \
   test2009_34.C \
   test2009_38.C \
   test2009_44.C \
   test2009_46.C \
   test2009_47.C \
   test2009_07.C \
   test2009_13.C \
   test2009_17.C \
   test2009_21.C \
   test2009_22.C \
   test2009_29.C \
   test2009_32.C \
   test2009_33.C \
   test2009_34.C \
   test2009_35.C \
   test2009_36.C \
   test2009_38.C \
   test2009_43.C \
   test2009_44.C \
   test2009_45.C \
   test2009_46.C \
   test2009_47.C \
   test2010_20.C \
   test2010_21.C \
   test2010_23.C \
   test2010_07.C \
   test2010_09.C \
   test2010_10.C \
   test2010_11.C \
   test2010_15.C \
   lexPhase2003_02.C \
   test2010_01.C \
   test2010_02.C \
   test2010_07.C \
   test2010_08.C \
   test2010_09.C \
   test2010_10.C \
   test2010_11.C \
   test2010_12.C \
   test2010_15.C \
   test2010_16.C \
   test2010_17.C \
   test2010_22.C \
   test2010_26.C \
   test2010_27.C \
   test2011_01.C \
   test2011_02.C \
   test2011_05.C \
   test2011_06.C \
   test2011_07.C \
   test2011_08.C \
   test2011_09.C \
   test2011_10.C \
   test2011_11.C \
   test2011_12.C \
   test2011_13.C \
   test2011_14.C \
   test2011_15.C \
   test2011_16.C \
   test2011_17.C \
   test2011_18.C \
   test2011_191.C \
   test2011_178.C \
   test2011_196.C \
   test2011_197.C \
   test2011_198.C \
   test2011_199.C \
   test2011_200.C \
   test2011_201.C \
   test2011_202.C \
   test2011_203.C \
   test2011_102.C \
   test2011_103.C \
   test2011_104.C \
   test2011_105.C \
   test2011_106.C \
   test2011_107.C \
   test2011_108.C \
   test2011_109.C \
   test2011_112.C \
   test2011_122.C \
   test2011_123.C \
   test2011_124.C \
   test2011_125.C \
   test2011_126.C \
   test2011_127.C \
   test2011_128.C \
   test2011_129.C \
   test2011_130.C \
   test2011_131.C \
   test2011_132.C \
   test2011_134.C \
   test2011_144.C \
   test2011_145.C \
   test2011_148.C \
   test2012_139.C \
   test2012_140.C \
   test2012_189.C \
   test2012_133.C \
   test2012_134.C \
   test2012_135.C \
   test2012_35.C \
   test2012_79.C \
   test2012_81.C \
   test2012_57.C \
   test2012_59.C \
   longFile.C \
   certSignalExample.C \
    math.C \
   test2012_86.C \
   test2012_252.C \
   test2012_261.C \
   test2012_272.C \
   test2012_273.C \
   test2012_274.C \
   test2012_275.C \
   test2012_276.C \
   test2012_277.C \
   test2012_278.C \
   test2013_13.C \
   test2013_14.C \
   test2013_15.C \
   test2013_16.C \
   test2013_17.C \
   test2013_19.C \
   test2013_24.C \
   test2013_30.C \
   test2013_35.C \
   test2013_41.C \
   test2013_42.C \
   test2013_43.C \
   test2013_45.C \
   test2013_49.C \
   test2013_185.C \
   test2013_224.C \
   test2013_233.C \
   test2013_245.C \
   test2013_247.C \
   test2013_248.C \
   test2013_249.C \
   test2013_254.C \
   test2013_262.C \
   test2013_263.C \
   test2013_264.C \
   test2013_265.C \
   test2013_266.C \
   test2013_267.C \
   test2013_268.C \
   test2013_269.C \
   test2013_270.C \
   test2013_309.C \
   test2013_321.C \
   test2013_322.C \
   test2013_323.C \
   test2013_195.C \
   test2013_197.C \
   test2013_09.C \
   test2013_242.C\
   test2013_257.C \
   test2013_260.C \
   test2013_234.C \
   test2013_235.C \
   test2013_240.C \
   test2013_241.C \
   test2013_246.C \
   test2013_84.C \
   test2013_85.C \
   test2013_96.C \
   test2013_62.C \
   test2013_40.C \
   test2013_236.C \
   test2014_175.C \
   test2014_51.C \
   test2014_52.C \
   test2014_59.C \
   test2014_63.C \
   test2014_64.C \
   test2014_14.C \
   test2014_15.C \
   test2014_22.C \
   test2014_23.C \
   test2014_25.C \
   test2014_42.C \
   test2014_44.C \
   test2014_46.C \
   test2014_99.C \
   test2014_100.C \
   test2014_101.C \
   test2014_102.C \
   test2014_103.C \
   test2014_104.C \
   test2014_105.C \
   test2014_106.C \
   test2014_113.C \
   test2014_118.C \
   test2014_119.C \
   test2014_120.C \
   test2014_121.C \
   test2014_138.C \
   test2014_158.C \
   test2014_164.C \
   test2014_173.C \
   test2014_180.C \
   test2014_181.C \
   test2014_213.C \
   test2014_214.C \
   test2014_227.C \
   test2014_228.C \
   test2014_229.C \
   test2014_237.C \
   test2015_72_icpc.C \
   test2015_82.C \
   test2015_83.C \
   test2015_84.C \
   test2015_87.C \
   test2015_92.C \
   test2015_93.C \
   test2015_98.C \
   test2015_105.C \
   test2015_109.C  \
   test2015_25.C  \
   test2015_90.C \
   test2015_91.C \
   test2015_94.C \
   test2015_95.C \
   test2015_96.C \
   test2015_62.C \
   test2015_63.C \
   test2015_64.C \
   test2016_90.C \
   test2016_92.C \
   test2016_94.C \
   test2016_95.C \
   test2016_35.C \
   test2016_39.C \
   test2016_58.C \
   restrict_template_parameter.C \
   test2016_22.C \
   test2016_23.C \
   test2016_24.C \
   test2017_05.C \
   test2017_06.C \
   test2017_07.C \
   test2017_08.C \
   test2017_20.C \
   test2017_24.C \
   test2017_29.C \
   test2017_33.C \
   test2017_34.C \
   test2017_59.C \
   test2017_67.C \
   test2017_99.C \
   test2017_85.C \
   test2017_86.C \
   test2017_99.C \
   test2019_25.C 

if ROSE_USE_EDG_VERSION_4_9
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2014_65.C \
     test2014_66.C \
     test2014_69.C
  TESTCODE_CURRENTLY_FAILING += \
     test2016_52.C \
     test2017_12.C
else
  TESTCODE_CURRENTLY_FAILING += \
     test2014_65.C \
     test2014_66.C \
     test2014_69.C
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2016_52.C 

# DQ (2/2/2019): EDG 5.0 fails for this use of __Float128, but Tristan is fixing it.
if ROSE_USE_EDG_VERSION_5_0
  TESTCODE_CURRENTLY_FAILING += \
     test2017_12.C
else
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2017_12.C
endif
endif

EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
   test2012_68.C

if ROSE_USING_GCC_VERSION_LATER_4_4
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2017_31.C \
     test2017_32.C \
     test2017_44.C \
     test2017_46.C \
     test2017_47.C \
     test2016_96.C \
     test2015_135.C \
     test2015_136.C

if USING_INTEL_COMPILER
   TESTCODE_CURRENTLY_FAILING += test2017_69.C
else
   EXAMPLE_TESTCODES_REQUIRED_TO_PASS += test2017_69.C
endif

else
  TESTCODE_CURRENTLY_FAILING += \
     test2017_31.C \
     test2017_32.C \
     test2017_44.C \
     test2017_46.C \
     test2017_47.C \
     test2017_69.C \
     test2016_96.C \
     test2015_135.C \
     test2015_136.C
endif

if ROSE_USING_GCC_VERSION_LATER_4_8
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2015_126.C \
     test2015_127.C \
     test2015_129.C 
else
  TESTCODE_CURRENTLY_FAILING += \
     test2015_126.C \
     test2015_127.C \
     test2015_129.C 
endif

if ROSE_USING_GCC_VERSION_LATER_6_0
  TESTCODE_CURRENTLY_FAILING += \
     test2018_01.C
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     rose-1701-1.C
else
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2018_01.C
  TESTCODE_CURRENTLY_FAILING += \
     rose-1701-1.C
endif

if ROSE_USING_BOOST_VERSION_1_57
  TESTCODE_CURRENTLY_FAILING += \
     test2014_77.C \
     test2014_78.C 
else
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2014_77.C \
     test2014_78.C 
endif

if USING_CLANG_COMPILER
  TESTCODE_CURRENTLY_FAILING += \
     test2014_71.C \
     test2014_111.C \
     test2015_70.C \
     test2015_81.C \
     test2016_82.C \
     test2005_50.C \
     test2007_141.C \
     test2012_188.C \
     test2013_243.C \
     test2014_187.C \
     test2014_187_work_around.C \
     test2014_188.C \
     test2015_120.C \
     test2013_304.C \
     test2014_81.C  \
     test2014_236.C \
     test2014_238.C \
     test2015_55.C \
     test2016_20.C \
     test2004_85.C \
     test2005_42.C \
     test2012_90.C \
     test2013_63.C \
     test2013_246.C \
     test2013_235.C 
else
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2014_71.C \
     test2014_111.C \
     test2015_70.C \
     test2015_81.C \
     test2016_82.C \
     test2005_50.C \
     test2007_141.C \
     test2012_188.C \
     test2013_243.C  \
     test2004_85.C \
     test2005_42.C \
     test2012_90.C \
     test2013_63.C \
     test2013_246.C \
     test2013_235.C 

if !USING_INTEL_COMPILER
    EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
       test2014_187.C \
       test2014_187_work_around.C \
       test2014_188.C \
       test2015_120.C \
       test2013_304.C \
       test2014_81.C  \
       test2014_236.C \
       test2014_238.C \
       test2015_55.C \
       test2016_20.C
else
    TESTCODE_CURRENTLY_FAILING += \
       test2014_187.C \
       test2014_187_work_around.C \
       test2014_188.C \
       test2015_120.C \
       test2013_304.C \
       test2014_81.C  \
       test2014_236.C \
       test2014_238.C \
       test2015_55.C \
       test2016_20.C
endif
endif

if USING_INTEL_COMPILER
  TESTCODE_CURRENTLY_FAILING += \
     test2014_159.C \
     test2014_211.C \
     test2006_08.C \
     test2006_37.C
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     rose-1962.C
else
  TESTCODE_CURRENTLY_FAILING += \
     rose-1962.C
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2014_159.C \
     test2014_211.C \
     test2006_08.C \
     test2006_37.C
endif

if OS_MACOSX
  TESTCODE_CURRENTLY_FAILING += \
     test2004_77.C \
     test2006_20.C \
     test2011_141.C \
     test2011_142.C \
     test2012_09.C \
     test2013_09.C \
     test2013_164.C \
     test2013_212.C 
else
  EXAMPLE_TESTCODES_REQUIRED_TO_PASS += \
     test2004_77.C \
     test2006_20.C \
     test2011_141.C \
     test2011_142.C \
     test2012_09.C \
     test2013_09.C \
     test2013_164.C \
     test2013_212.C 
endif

# Switch between full and short list of test codes
if ROSE_USE_LONG_MAKE_CHECK_RULE
  TESTCODES_REQUIRED_TO_PASS = $(EXAMPLE_TESTCODES_REQUIRED_TO_PASS)
else
  TESTCODES_REQUIRED_TO_PASS = $(EXAMPLE_TESTCODES_REQUIRED_TO_PASS_SHORT)
endif

# Automake's testing mechanism (which defines the "make check" rule) requires passing tests.
TESTCODES = \
   $(TESTCODES_REQUIRED_TO_PASS) 

# QMTest allows both passing and failing tests.
ALL_TESTCODES = \
   $(EXAMPLE_TESTCODES_REQUIRED_TO_PASS) \
   $(TESTCODE_CURRENTLY_FAILING) 

# Note the quotes and escapes that are required:
# ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=symbolize=1 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"
# VALGRIND_OPTIONS = -v --num-callers=12 --leak-check=yes --error-limit=no --show-reachable=yes
VALGRIND_OPTIONS = --tool=memcheck -v --num-callers=30 --leak-check=no --error-limit=no --show-reachable=yes --trace-children=yes --suppressions=$(top_srcdir)/scripts/rose-suppressions-for-valgrind
# VALGRIND = valgrind $(VALGRIND_OPTIONS)
# VALGRIND =

# DQ (11/5/2016): Adding support for address sanitizer (borrowing the VALGRIND variable to support 
# this, this implementation needs review).  It might be better to prepend the information to the 
# CC and CXX variables. I think that the purify support uses this approach.
if ROSE_USE_SANITIZER
VALGRIND = $(ADDRESS_SANITIZER_OPTIONS)
else
VALGRIND =
endif

TESTCODE_INCLUDES = -I$(srcdir) $(ROSE_BOOST_NORMAL_INCLUDE_PATH) -I$(top_srcdir)/tests/nonsmoke/functional/CompileTests/A++Code -I$(top_builddir)

#########
# Targets lists

PASSING_TEST_Source_passed = ${TESTCODES:.C=.C.passed}
TEST_Source_passed = ${ALL_TESTCODES:.C=.C.passed}

#########
# Translator to be used: calling "make TEST_TRANSLATOR=../../testBackend" uses the backend compiler only

../../testTranslator:
	cd ../..; $(MAKE) testTranslator

../../testBackend:
	cd ../..; $(MAKE) testBackend

testCompiler:
	ln -s `which @BACKEND_CXX_COMPILER@` testCompiler

TEST_TRANSLATOR=../../testTranslator

#########
# ROSE_FLAGS

LANG_FLAGS =

ROSE_FLAGS = -std=c++
if !ROSE_USE_CLANG_FRONTEND
   ROSE_FLAGS += --edg:no_warnings --edg:restrict
endif
ROSE_FLAGS += -w -rose:verbose 0 -rose:skip_unparse_asm_commands

#########
# RTH test targets

$(TEST_Source_passed): %.passed: $(srcdir)/% $(TEST_TRANSLATOR) $(top_srcdir)/scripts/test_exit_status
if !ROSE_USE_INSURE
	@$(RTH_RUN) \
	   CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -c $(srcdir)/$(@:.C.passed=.C)" \
	   TITLE="TEST: $(TEST_TRANSLATOR) $(@:.C.passed=.C)" \
	   $(top_srcdir)/scripts/test_exit_status $@
else
	$(VALGRIND) $(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS)  $(TESTCODE_INCLUDES) -c $(srcdir)/$(@:.C.passed=.C)
endif

#
############

# DQ (9/18/2011): Added testing for new option to use folded constants or the original express trees.
TEST_Objects_FoldedConstants = ${EXAMPLE_TESTCODES_REQUIRED_TO_PASS_FOLDED_CONSTANTS:.C=.foldedConstants-o}
TEST_Objects_UnfoldedConstants = ${ALL_TESTCODES:.C=.unfoldedConstants-o}

method-defn-in-tpldecl-0.C.passed: $(srcdir)/method-defn-in-tpldecl-0.C $(TEST_TRANSLATOR) $(top_srcdir)/scripts/test_exit_status
	@$(RTH_RUN) \
	    CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -I$(top_builddir) $(APP_INCLUDES) $(srcdir)/$(@:.C.passed=.C) -o method-defn-in-tpldecl-0 -rose:unparse_edg_normalized_method_ROSE_1392; test -e method-defn-in-tpldecl-0" \
	    TITLE="testTranslator $(notdir $<) [$@]" \
	    $(top_srcdir)/scripts/test_exit_status $@

method-defn-in-tpldecl-1.C.passed: $(srcdir)/method-defn-in-tpldecl-1.C $(srcdir)/method-defn-in-tpldecl-1.h $(TEST_TRANSLATOR) $(top_srcdir)/scripts/test_exit_status
	@$(RTH_RUN) \
	    CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -I$(top_builddir) $(APP_INCLUDES) $(srcdir)/$(@:.C.passed=.C) -o method-defn-in-tpldecl-1 -rose:unparse_edg_normalized_method_ROSE_1392; test -e method-defn-in-tpldecl-1" \
	    TITLE="testTranslator $(notdir $<) [$@]" \
	    $(top_srcdir)/scripts/test_exit_status $@

# DQ (9/18/2011): This is testing the option to process the AST to use the constant folded values (contained in the AST).
$(TEST_Objects_FoldedConstants): ../../testTranslatorFoldedConstants
	$(VALGRIND) ../../testTranslatorFoldedConstants $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/$(@:.foldedConstants-o=.C) && touch $@

# DQ (9/18/2011): This is the equivalent to the default using testTranslator (so not critical to run this).
$(TEST_Objects_UnfoldedConstants): ../../testTranslatorUnfoldedConstants
	$(VALGRIND) ../../testTranslatorUnfoldedConstants $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/$(@:.unfoldedConstants-o=.C) && touch $@

# DQ (9/18/2011): This is testing the option to process the AST to use the constant folded values (contained in the AST).
$(TEST_Objects_unnormalized): ../../testTranslator
	$(VALGRIND) ../../testTranslator -rose:suppress_variable_declaration_normalization $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/$(@:.unnormalized-o=.C) && touch $@

# DQ (4/6/2010): Added test for parsing only (tested here for C++ code)
testParser:../../testParser
	$(VALGRIND) ../../testParser $(ROSE_FLAGS) $(TESTCODE_INCLUDES) -I$(srcdir) -c $(srcdir)/test2001_01.C

# This requires a special makefile rule
test2005_56.o: $(TEST_TRANSLATOR)
	$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -DTEST_STRING_MACRO=\""Thu Apr 14 08:18:33 PDT 2005"\" -c $(srcdir)/test2005_56.C -o test2005_56.o

test2014_54.o: $(TEST_TRANSLATOR)
	@echo "Running boost specific test."
	$(VALGRIND) $(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) $(ROSE_INCLUDES) -c $(srcdir)/test2010_01.C -o test2010_01.o

test2010_01.o: $(TEST_TRANSLATOR)
	@echo "Running boost specific test."
	$(VALGRIND) $(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) $(ROSE_INCLUDES) -c $(srcdir)/test2010_01.C -o test2010_01.o

test2010_02.o: $(TEST_TRANSLATOR)
	@echo "Running boost specific test."
	$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -I$(top_builddir) $(ROSE_INCLUDES) -c $(srcdir)/test2010_02.C -o test2010_02.o

test2010_07.o: $(TEST_TRANSLATOR)
	@echo "Running boost specific test."
	$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -I$(top_builddir) $(ROSE_INCLUDES) -c $(srcdir)/test2010_07.C -o test2010_07.o

test2010_08.o: $(TEST_TRANSLATOR)
	@echo "Running boost specific test."
	$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -I$(top_builddir) $(ROSE_INCLUDES) -c $(srcdir)/test2010_08.C -o test2010_08.o

cpp_test2010_07: $(TEST_TRANSLATOR)
	@echo "Running boost specific test."
	g++ -E -I$(top_builddir) $(ROSE_INCLUDES) -c $(srcdir)/test2010_07.C

# DQ (9/13/2013): Added new test for -rose:unparse_includes (which has a bug in how it unparses C++ style comments
# and should maybe not be unparsing declarations that are front-end specific (e.g. builtin function declarations).
test_unparse_includes_option.passed: $(TEST_TRANSLATOR)
	@$(RTH_RUN) CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -rose:unparse_includes -rose:verbose 0 -I$(top_builddir) -c $(srcdir)/test2013_257.C -o test2013_257_unparse_headers.o" $(top_srcdir)/scripts/test_exit_status $@

# DQ (9/16/2013): Test linking the resulting translated file. Phil Miller reported an error and the issue
# is that va_start() and va_end() must be unparsed to be __builtin_va_start() and __builtin_va_end() (at least for GNU).
test_unparse_includes_option_with_link.passed: $(TEST_TRANSLATOR)
	@$(RTH_RUN) CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -rose:unparse_includes -rose:verbose 0 -I$(top_builddir) $(srcdir)/test2013_260.C -o test2013_260_unparse_headers" $(top_srcdir)/scripts/test_exit_status $@

# DQ (9/17/2013): Added autoconf style link test.
test_common_configure_test_with_link_part_1.passed: $(TEST_TRANSLATOR)
	@cp $(srcdir)/conftest.C conftest.C
	@$(RTH_RUN) CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -I$(srcdir) conftest.C -o conftest_configure_test_part_1" $(top_srcdir)/scripts/test_exit_status $@

# DQ (9/22/2013): Added autoconf style link test.
test_common_configure_test_with_link_part_2.passed: $(TEST_TRANSLATOR)
	@cp $(srcdir)/conftest_2.C conftest.C
	@$(RTH_RUN) CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -I$(srcdir) conftest.C -o conftest_configure_test_part_2" $(top_srcdir)/scripts/test_exit_status $@

# DQ (9/22/2013): Added autoconf style link test.
test_common_configure_test_with_link_part_3.passed: $(TEST_TRANSLATOR)
	@cp $(srcdir)/conftest_3.C conftest.C
	@$(RTH_RUN) CMD="$(TEST_TRANSLATOR) $(LANG_FLAGS) $(ROSE_FLAGS) -I$(srcdir) conftest.C -o conftest_configure_test_part_3" $(top_srcdir)/scripts/test_exit_status $@

# DQ (12/28/2015): Added test for new option to not normalize variable declarations.
test_suppress_variable_declaration_normalization.passed: $(TEST_TRANSLATOR)
	@$(RTH_RUN) CMD="$(TEST_TRANSLATOR) -rose:suppress_variable_declaration_normalization $(ROSE_FLAGS) -c $(srcdir)/test_multible_variables_in_variable_declaration.C" $(top_srcdir)/scripts/test_exit_status $@

testOption:
	$(TEST_TRANSLATOR) -rose:verbose 0 -nostdinc -c $(srcdir)/test2015_08.C

TEST_TEMPLATE_TRANSLATOR = ../../testTemplates

# DQ (7/20/2015): Added template tests using new testTemplates translator that forces 
# output of instantiated templates (part of ongoing improvements to template support).
# This test translator will work for test2015_32.C - test2015_36.C
# I will make this in the a better organized set of tests later.
# DQ (10/12/2015): Note that tests test2015_37.C through test2015_54.C are these tests.
testTemplateExample: $(TEST_TEMPLATE_TRANSLATOR)
	$(TEST_TEMPLATE_TRANSLATOR) $(ROSE_FLAGS) -c $(srcdir)/test2015_32.C
	$(TEST_TEMPLATE_TRANSLATOR) $(ROSE_FLAGS) -c $(srcdir)/test2015_33.C
	$(TEST_TEMPLATE_TRANSLATOR) $(ROSE_FLAGS) -c $(srcdir)/test2015_34.C
	$(TEST_TEMPLATE_TRANSLATOR) $(ROSE_FLAGS) -c $(srcdir)/test2015_35.C
	$(TEST_TEMPLATE_TRANSLATOR) $(ROSE_FLAGS) -c $(srcdir)/test2015_36.C


if ROSE_WITH_LIBHARU
TEST_PDF_TRANSLATOR = ../../testPDFGeneration

$(TEST_PDF_TRANSLATOR):
	cd ../..; $(MAKE) testPDFGeneration
endif

../../testTranslatorFoldedConstants:
	cd ../..; $(MAKE) testTranslatorFoldedConstants

../../testTranslatorUnfoldedConstants:
	cd ../..; $(MAKE) testTranslatorUnfoldedConstants

$(TEST_TEMPLATE_TRANSLATOR):
	cd ../..; $(MAKE) testTemplates


# Make sure that all the test codes end up in the distribution
#      $(TESTCODE_CURRENTLY_FAILING_ON_OSX) $(STATISTICALLY_FAILING_TESTS) $(UNMENTIONED_SOURCE_FILES)
EXTRA_DIST = $(EXAMPLE_TESTCODES_REQUIRED_TO_PASS) $(TESTCODE_CURRENTLY_FAILING) \
     $(TESTCODE_CURRENTLY_FAILING_ON_OSX) $(STATISTICALLY_FAILING_TESTS) $(UNMENTIONED_SOURCE_FILES) \
     test_CplusplusMacro_C.C test2006_137.C \
     confdefs.h  test2001_05.h  test2001_11.h test2001_18A.h  test2003_08.h  test2003_12.h  test2003_24.h  test2004_40.h \
     test2005_154.h  test2005_158.h  test2005_15.h   test2005_26.h  test2005_81.h  test2006_33.h foo.h \
     test2001_15.h  test2001_18B.h  test2003_09.h  test2003_14.h  test2003_25.h  test2005_133.h  test2005_157.h \
     test2005_159.h  test2005_160.h  test2005_75.h  test2005_88.h  test2006_36.h test2006_42.h test2006_187a.h \
     test2006_187b.h test2007_08.h test2007_41.h  test2007_42.h test2007_47.h test2007_48.h test2007_97.h \
     test2007_101.h test2007_136.h test2007_137.h test2007_160.h test2007_160a.h test2007_167.h \
     test2008_11.h test2014_66.h test2014_112.h LogicalPath.cpp test2005_56.C test2010_25.h test2012_242.h test2012_268.h \
     test2013_235.C test2013_236.C conftest.C conftest_2.C test2006_112.C test2010_25.C test2003_24.C \
     test2004_82.C test2014_130.h test2015_08.h test2015_29.h test2015_85.h \
     method-defn-in-tpldecl-1.h sgnodee.hpp test2006_136.h test2007_113.h test2007_114.h test2007_40.h test2012_178.h

# DQ (6/18/2008): All of these should be present...
# confdefs.h     test2001_11.h   test2001_18B.h  test2003_12.h  test2003_25.h   test2005_154.h  test2005_159.h  test2005_26.h  test2005_88.h    test2006_187b.h  test2006_42.h   test2007_113.h  test2007_137.h   test2007_167.h  test2007_42.h  test2007_97.h
# foo.h          test2001_15.h   test2003_08.h   test2003_14.h  test2004_40.h   test2005_157.h  test2005_15.h   test2005_75.h  test2006_136.h   test2006_33.h    test2007_08.h   test2007_114.h  test2007_160a.h  test2007_40.h   test2007_47.h
# test2001_05.h  test2001_18A.h  test2003_09.h   test2003_24.h  test2005_133.h  test2005_158.h  test2005_160.h  test2005_81.h  test2006_187a.h  test2006_36.h    test2007_101.h  test2007_136.h  test2007_160.h   test2007_41.h   test2007_48.h

# This was a bug specific to the normalization of source file names to absolute paths
# DQ (12/11/2009): At the moment it is an failing test because "thisIsAnError" will be 
# interpreted to be a file.
testUsingBadCommandline: $(TEST_TRANSLATOR)
	echo "class A { int x; float y;}; int main() { int x=0; return x; }" > roseTestProgram.C; \
	$(TEST_TRANSLATOR) -DthisIsOK -D thisIsAnError -rose:verbose 0 roseTestProgram.C

# This was a bug specific to the normalization of source file names to absolute paths
testBuildUsingNoPath: $(TEST_TRANSLATOR)
	echo "class A { int x; float y;}; int main() { int x=0; return x; }" > roseTestProgram.C; \
	$(TEST_TRANSLATOR) -rose:verbose 0 roseTestProgram.C

# This was a bug specific to the normalization of source file names to absolute paths
testBuildUsingRelativePath: $(TEST_TRANSLATOR)
	echo "class A { int x; float y;}; int main() { int x=0; return x; }" > roseTestProgram.C; \
	$(TEST_TRANSLATOR) -rose:verbose 0 ../Cxx_tests/roseTestProgram.C

# This was always worked but is the alternative to the normalization of source file names to absolute paths
testBuildUsingAbsolutePath: $(TEST_TRANSLATOR)
	echo "class A { int x; float y;}; int main() { int x=0; return x; }" > roseTestProgram.C; \
	$(TEST_TRANSLATOR) -rose:verbose 0 `pwd`/roseTestProgram.C

# DQ (4/26/2019): Test the use of the -ansi option in ROSE.
test_ansi_and_nonansi_modes:
# DQ (4/26/2019): It appears that -edg:strict option does not work.
#	$(TEST_TRANSLATOR) -rose:verbose 0 -edg:strict $(srcdir)/test_ansi.C
#	$(TEST_TRANSLATOR) -rose:verbose 0 $(srcdir)/test_nonansi.C
	$(TEST_TRANSLATOR) -rose:verbose 0 -ansi -c $(srcdir)/test_ansi.C
	$(TEST_TRANSLATOR) -rose:verbose 0 -c $(srcdir)/test_nonansi.C

multipleDeclarationsBug: $(srcdir)/markus_1a.C $(srcdir)/markus_1b.C $(srcdir)/markus_1.h
	$(TEST_TRANSLATOR) -rose:verbose 0 -c $(srcdir)/markus_1a.C $(srcdir)/markus_1b.C

# DQ (10/23/2010): Added MPI tests that I can at least run locally to debug when Hudson MPI tests fail.
MPI_LOCATION = /home/dquinlan/ROSE/ROSE_TESTS/MPI_header_tests/MPI_header_tests_64bit
test_MPI_LAM:
	$(TEST_TRANSLATOR) -rose:verbose 0 -I$(MPI_LOCATION)/LAM_MPI/include -c $(MPI_LOCATION)/tests/input.C

test_multiple_files: $(srcdir)/test2012_246a.C $(srcdir)/test2012_246b.C
	../../testTranslator -rose:verbose 1 -c $(srcdir)/test2012_246a.C $(srcdir)/test2012_246b.C 

# DQ (7/24/2018): Test for output spew from multiple files on the same command line.
test_multiple_files_2: $(srcdir)/test2018_01.C $(srcdir)/test2018_02.C
	../../testTranslator -rose:verbose 0 -c $(srcdir)/test2018_01.C $(srcdir)/test2018_02.C 

test_multiple_files_3: $(srcdir)/test2019_30a.C $(srcdir)/test2019_30b.C $(srcdir)/test2019_30.h 
	../../testTranslator -rose:verbose 0 -c $(srcdir)/test2019_30a.C $(srcdir)/test2019_30b.C 

# DQ (7/9/2019): This test demonstrates a failing case for older versions of EDG (pre 5.0) 
# when using at least GNU 5.1.  Not clear if we should worry about this since we are moving
# to have EDG 5.0 be the default shortly.  This issue reproduces a problem that is only see
# in one of the CFG tests.  It is not a problem with EDG 5.0, as I understand it.
test_multiple_files_4: $(srcdir)/test2019_42a.C $(srcdir)/test2019_42b.C 
	../../testTranslator -rose:verbose 0 -c $(srcdir)/test2019_42a.C $(srcdir)/test2019_42b.C 

# DQ (7/24/2011): These test fail the AST IO but pass the compilation tests.  Debug these for AST File I/O separately.
failingAST_IO_tests: test2011_113.o test2011_114.o test2011_116.o

print_testcodes:
#	echo $(TESTCODES)
	echo "PASSING_TEST_Source_passed = $(PASSING_TEST_Source_passed)"

# Added performance test for ROSE evaluation:
performance_timing:
	../../testGraphGeneration --edg:no_warnings -w -rose:verbose 3 -rose:skip_unparse_asm_commands -rose:skipAstConsistancyTests -rose:skip_commentsAndDirectives -rose:skip_unparse -I$(srcdir) -c $(srcdir)/testPerformance.C

if ROSE_WITH_LIBHARU
# DQ (3/17/2017): Added PDF test for ROSE evaluation (forces testing of parts of ROSE for lcov):
test_pdf_generation: $(TEST_PDF_TRANSLATOR)
	../../testPDFGeneration --edg:no_warnings -w -rose:verbose 0 -rose:skip_unparse_asm_commands -rose:skipAstConsistancyTests -rose:skip_commentsAndDirectives -rose:skip_unparse -I$(srcdir) -c $(srcdir)/test2004_77.C
	ls -l *.pdf
	@echo "Removing the generated PDF file because it is up to 150Meg and we want to save disk space."
	rm *.pdf
else
test_pdf_generation:
	@echo "libharu support is not enabled"
endif

# DQ (11/19/2012): HPCToolKit use.  This makes some significant assumptions on how we have setup HPCToolKit.
hpctoolkit:
	hpcrun -e WALLCLOCK -- ../../testTranslator --edg:no_warnings -w -rose:verbose 0 -rose:skip_unparse_asm_commands -rose:skipAstConsistancyTests -rose:skip_commentsAndDirectives -rose:skip_unparse -I/home/dquinlan/ROSE/git-dq-edg4x-rc/tests/nonsmoke/functional/CompileTests/Cxx_tests -c /home/dquinlan/ROSE/git-dq-edg4x-rc/tests/nonsmoke/functional/CompileTests/Cxx_tests/testPerformance.C
#	hpcprof hpctoolkit-lt-testTranslator-measurements/lt-testTranslator-000000-000-0f802c45-7612-0.hpcrun
	hpcprof hpctoolkit-lt-testTranslator-measurements/lt-testTranslator-000000-000-0f802c45-3676-0.hpcrun
#	hpcviewer /home/dquinlan/ROSE/ROSE_CompileTree/git-LINUX-64bit-4.2.4-dq-edg4x-rc-debug_mode_off/tests/nonsmoke/functional/CompileTests/Cxx_tests/hpctoolkit-lt-testTranslator-database-11205 &

check-local: 
if ROSE_USE_EDG_VERSION_4_9
	@echo "Using EDG 4.9"
# if ROSE_USING_GCC_VERSION_LATER_4_9
if USING_GNU_COMPILER
	@echo "Using GNU compiler"
if ROSE_USING_GCC_VERSION_LATER_4_9
	@echo "Using EDG 4.9 and GNU version later then 4.9 (skipping C++ tests: reconfigure with EDG 4.12 to run C++ tests)"
else  # NOT ROSE_USING_GCC_VERSION_LATER_4_9
	@echo "Using GNU compiler (version up to 4.8)"
	@$(MAKE) $(PASSING_TEST_Source_passed)
	@$(MAKE) test_pdf_generation
endif #  ROSE_USING_GCC_VERSION_LATER_4_9
else  # NOT USING_GNU_COMPILER
	@echo "NOT Using GNU compiler"
if USING_CLANG_COMPILER
	@echo "Using EDG 4.9 and CLANG compiler (skipping C++ tests: reconfigure with EDG 4.12 to run C++ tests)"
else  # NOT USING_CLANG_COMPILER
if USING_INTEL_COMPILER
	@echo "Using EDG 4.9 and INTEL compiler (skipping C++ tests: reconfigure with EDG 4.12 to run C++ tests)"
else  # NOT USING_INTEL_COMPILER
	@echo "Using EDG 4.9 and GNU version 4.8 or earlier (ROSE supports running C++ tests with this configuration)"
	@$(MAKE) $(PASSING_TEST_Source_passed)
	@$(MAKE) test_pdf_generation
endif # USING_INTEL_COMPILER
endif # USING_CLANG_COMPILER
endif # USING_GNU_COMPILER
else  # NOT ROSE_USE_EDG_VERSION_4_9
	@echo "Using EDG 4.12"
	@echo "Using EDG version later than 4.9 (ROSE supports running all C++ tests across all compilers)"
	@$(MAKE) $(PASSING_TEST_Source_passed)
	@$(MAKE) test_pdf_generation
endif # ROSE_USE_EDG_VERSION_4_9
#	I'm not sure why these are coded to run in serial [RPM 2014-08-29]
	@$(MAKE) test_unparse_includes_option.passed
	@$(MAKE) test_unparse_includes_option_with_link.passed
# DQ (2/27/2017): Adding additional restrictions for EDG 4.9 (fails for Clang and Boost 1.55).
if !ROSE_USE_EDG_VERSION_4_9
	@$(MAKE) test_common_configure_test_with_link_part_1.passed
	@$(MAKE) test_common_configure_test_with_link_part_2.passed
endif
#	DQ (9/22/2013): I think this failes on later versions of GNU (e.g. gnu 4.4.5).
#	@$(MAKE) test_common_configure_test_with_link_part_3
	@$(MAKE) testTemplateExample
	@echo "*******************************************************************************************************************"
	@echo "****** ROSE/tests/nonsmoke/functional/CompileTests/Cxx_tests: make check rule complete (terminated normally) ******"
	@echo "*******************************************************************************************************************"

clean-local:
	rm -f a.out *.o rose_*.[cC] roseTestProgram.C *.dot *.ti *.pdf
	rm -f *.foldedConstants-o
	rm -f *.unfoldedConstants-o
	rm -rf QMTest
	rm -f *.int.c
	rm -f test2013_260_unparse_headers conftest_configure_test*
	rm -f conftest.C
	rm -f *.passed *.failed *.err
	rm -f method-defn-in-tpldecl-0 method-defn-in-tpldecl-1

#------------------------------------------------------------------------------
#                           Performance Timing Tests
#------------------------------------------------------------------------------
## Purpose
#
#  Enforce a time limit constraint on testcode compilation.
#
### Make Targets
#
#  Note: A testcode's object files are removed before running the individual
#  steps in these make targets.
#
#### Default
#
#  $ make <testcode>.timed
#
#    Compiles <testcode> with a $TIMEOUT limit
#
#    E.g.  $ make test2005_35.timed
#
#  $ make check-performance-timing
#
#    Compiles all testcodes with a $TIMEOUT limit
#
#### Threshold
#
#  $ make <testcode>.timed_with_threshold
#
#    Compiles <testcode> with g++ and then uses the g++ compile time
#    as a $TIMEOUT threshold to compile <testcode> with ROSE.
#
#    E.g.  $ make test2005_35.timed_with_threshold
#
#  $ make check-performance-timing-with-threshold
#
#    Compiles all testcodes with a $TIMEOUT limit calculated from
#    the g++ compile time threshold.
#
### Environment Variables
#
#  TIMEOUT              Maximum time limit for the compilation of a <testcode>
#  TIMEOUT_TOLERANCE    $gnu_time * $TIMEOUT_TOLERANCE (threshold tests only)
#------------------------------------------------------------------------------

# DQ (6/30/2013): Increased this to support compiling Boost example tests. We 
# need to rethink how we want to handl this. I suggest restricting this to a 
# few tests instead of each test. Compiling with optimization also makes about
# a factor of four difference for test2013_241.C (boost example test code).
# Since Jenkins testing is currently done without optimization we need the 
# larger timeout value just to handle the newer boost test codes.
# TIMEOUT            ?= 60  # Default timeout value
TIMEOUT            ?= 420  # Default timeout value
TIMEOUT_TOLERANCE  ?= 20  # Default timeout tolerance value for threshold
                          # tests = $gnu_time * $TIMEOUT_TOLERANCE

check-performance-timing:
	@$(MAKE) $(TEST_Source_passed:.C.passed=.timed)

check-performance-timing-with-threshold:
	@$(MAKE) $(TEST_Source_passed:.C.passed=.timed_with_threshold)

$(TEST_Source_passed:.C.passed=.timed):
	rm -f $(@:.timed=.C.passed) &&                                               \
	$(top_srcdir)/scripts/timeout.sh $(TIMEOUT) $(MAKE) $(@:.timed=.C.passed) || \
			(                                                                        \
				test $$? -eq 124 &&                                                    \
				echo "[ERROR] '$@' compilation timed out after '$(TIMEOUT)' seconds" &&  \
				exit 1                                                                 \
			)

# 1. Time and Compile testcode with g++
# 2. Compile with ROSE, using TIMEOUT relative to time results from g++
#
# Uses $(TESTCODES_REQUIRED_TO_PASS)
#
$(TEST_Source_passed:.C.passed=.timed_with_threshold):
	rm -f $(@:.timed_with_threshold=.C.passed) &&                                          \
	SECONDS=0 &&                                                                           \
			$(MAKE) TEST_TRANSLATOR=g++ ROSE_FLAGS=  $(@:.timed_with_threshold=.C.passed) &&   \
	gnu_time="$$((($$SECONDS + 1)))" &&                                                    \
	echo "[INFO] '$@' compiled with GNU in '$$gnu_time' seconds" &&                        \
	rm -f $(@:.timed_with_threshold=.C.passed) &&                                          \
	TIMEOUT="$$((($$gnu_time * $(TIMEOUT_TOLERANCE))))" &&                                 \
	echo "[INFO] '$@' performance test is set to timeout after '$$TIMEOUT' seconds" &&     \
	$(MAKE) TIMEOUT="$$TIMEOUT" $(@:.timed_with_threshold=.timed)

status:
	@$(MAKE) $(TEST_Source_passed)

